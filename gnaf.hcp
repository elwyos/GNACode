//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include shing.shingdate shing.varchar fragdb.db schdangler ptrie
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
namespace Gnaf
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Locality

   varCHAR<15> locality_pid

      
   SDate date_created
   SDate date_retired
      
   varCHAR<100> name
   int primary_postcode = -1
   
   char locality_class_code
      // a = alais only, d = district
      // g = gazetted locality, h = hundred
      // i = indigenous location, m = manually validated
      // t = topographic locality, u = unofficial suburb
      // v = unofficial topographic feature
   
   varCHAR<15> state
      // but we'll make it link to State instead, later
   
   // ------------------------------
   // we'll take care of this later
   varCHAR<15> gnaf_locality_pid
   int8_t gnaf_reliability_code = -1; 
   // ------------------------------
   
   bool dbp_occupied = false
   

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Street
   varCHAR<15> street_pid
   SDate date_created
   SDate date_retired
   
   char street_class_code // c for confirmed, u for unconfirmed
   
   varCHAR<100> name
      // guess name of the street
      
   varCHAR<15> type
   varCHAR<15> suffix
   
   
   frgLINK<Locality> locality
   
   // ----------------------------
   // who cares about these
   varCHAR<15> gnaf_street_pid
   int8_t gnaf_street_confidence
   int8_t gnaf_reliability_code
   // like who cares about these for now
   // ----------------------------
   
   bool dbp_occupied = false

   
   
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class AddressDetail
   // -----------------------------
   varCHAR<15> address_detail_pid
   // -----------------------------
   SDate date_created = SDate(0)
   SDate date_last_modified = SDate(0)
   SDate date_retired = SDate(0)
   // -----------------------------
   //poolSTRING building_name // up to 200 chars
   varCHAR<200> building_name
   
   // -----------------------------
   varCHAR<2> lot_number_prefix
   varCHAR<5> lot_number
   varCHAR<2> lot_number_suffix
   // -----------------------------
   varCHAR<7> flat_type_code // FK
      // I guess there's only a few of these eh?
   varCHAR<2> flat_number_prefix
   int32_t flat_number = -1
   varCHAR<2> flat_number_suffix
   // -----------------------------
   varCHAR<4> level_type_code // FK
   varCHAR<2> level_number_prefix
   int32_t level_number = -1
   varCHAR<2> level_number_suffix
   // -----------------------------
   varCHAR<3> number_first_prefix
   int32_t number_first = -1
   varCHAR<2> number_first_suffix
   // -----------------------------
   varCHAR<3> number_last_prefix
   int32_t number_last = -1
   varCHAR<2> number_last_suffix
   // -----------------------------
   //varCHAR<15> street_locality_pid // FK -> street locality
   frgLINK<Street> street // links to street
   // -----------------------------
   //poolSTRING location_description // up to 45 chars
   varCHAR<45> location_description
   // -----------------------------
   //varCHAR<15> locality_pid // FK
   frgLINK<Locality> locality // links to Locality
   char alias_principal = 0;
   int32_t postcode = -1;
   //poolSTRING private_street
   varCHAR<75> private_street
   varCHAR<20> legal_parcel_id
   int8_t confidence = 0;
   // -----------------------------
   varCHAR<15> address_site_pid
   int8_t level_geocoded_code // FK
   // -----------------------------
   varCHAR<15> property_pid
   varCHAR<15> gnaf_property_pid
   char primary_secondary = 0; // a char, I guess
   // -----------------------------
   varCHAR<22> geocode_lat
   varCHAR<22> geocode_lng
   // -----------------------------
   bool dbp_occupied = false
   // -----------------------------

   /\/ uNSORTED /\/

      print();
      numberStreetPostcodeString() -> string;
      expired() -> bool;
      // naiveMatch(int firstnum, int endnum, int lepostcode, const string& streetphrase) -> bool;
      fullStreetName() -> string;
      naiveMatch(int unitnumer, int firstnum, int endnum, int lepostcode, const string& streetphrase) -> bool;
      scoredMatchAssumingMatchedStreet(Address& a) -> int;
      // toSimpleString();
      plusCode() -> string;
      toSimpleString() -> string;

   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Building
   
   // building ID: number+street+postcode
   string buildingname // some may not even have names
   vector<frgLINK<AddressDetail> > units_inside
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class AddressSearchResult
   Frag::PREF<AddressDetail> address
   int score
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class StreetNameMeta
   vector<Frag::PREF<Street> > streets
   vector<Frag::PREF<AddressDetail> > addies
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Gnaf

   // ------------------------------------------------------------
   // setings used for import
   string gnaf_psv_folder = "/home/yose/dev/geo/gnafpsvs/";
   string gnaf_state_code = "VIC";

   // ------------------------------------------------------------

   frgDB db
   frgVEC<Locality>& localities // aka suburbs I guess
   frgVEC<Street>& streets
   frgVEC<AddressDetail>& addies
   
   // ------------------------------------------------------------
   
   map<string, Building> buildingmap
   
   // ------------------------------------------------------------
   // loading context (we'll do primkey stuff later)
   map<string, int> locality_indexes
   map<string, int> street_indexes
   // ------------------------------------------------------------
   
   // these need to be synced post loading
   bool locality_map_synced = false
   map<string, Frag::PREF<Locality>> locality_map
   ptrie<Frag::PREF<Locality>> locality_trie
   
   // ------------------------------------------------------------
   bool streetname_metas_synced
   map<string, StreetNameMeta> streetname_metas
   // ------------------------------------------------------------

   /\/ uNSORTED /\/

      Gnaf();
      fill();
      fill_localities();
      getLocalityIndex(const string& thename) -> int;
      fill_streets();
      fill_addies();
      getStreetIndex(const string& thename) -> int;
      testBuildingMap();
      naiveStreetSearch(const string& phrase);
      syncLocalityMap();
      syncStreetNameMetas();
      findMatches(Address& addie) -> vector<AddressSearchResult>;

   
//////////////////////////////////////////////////////////////////////////////////////////
DECLschdangler(gnaf, Gnaf);
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
