//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class AddieCompo
   bool filled = false
   
   int valuenum = -1
   string firstvalpostfix;
   char connector = 0;
   int secvaluenum = -1
   string secvalpostfix
      // e.g for unit B23X or unnit B3/4 or whatever
   
   
   string value
   
   string postfixlong
   string postfix
   
   [raw]
      operator bool() { return filled; }

   /\/ uNSORTED /\/

      AddieCompo();
      AddieCompo(const string& firststr, const string& secondstr);
      printFirstPart();
      stringifyFirstPart() -> string;

   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Address
   
   AddieCompo unitnumber
   AddieCompo floorlevel
   AddieCompo lot
   AddieCompo propnumber // house or property number
   
   AddieCompo streetname
   AddieCompo deliverytype
      // and type
   AddieCompo locality
      // just a name really
   AddieCompo state
   AddieCompo postcode
   
   AddieCompo country
      // country probably can be ignored for now

   string error_remainder
   
   /\/ uNSORTED /\/

      print();
      toStandardisedFormat() -> string;

   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
